package indi.moon.firstweek;

import java.util.ArrayList;

/**
 * @version 1.1.0
 * 학습은 다음과 같은 규칙을 가진다.
 * ※절대 규칙
 * 1) 모든 규칙은 우선순위에 따라 규칙이 진행된다.
 * 2) 만약 규칙을 따라 학습하되 더 이상 값을 찾을 수 없다고 판단한 경우 컴퓨터는 항복한다.
 * 3) 학습데이터 info는 다음과 같은 데이터가 포함되어 있다.
 *      1. 결과가 볼 일 경우의 학습데이터가 담을 TB
 *      2. 결과가 스트라이크 일 경우 학습데이터가 담을 TS
 *      3. 이전 모든 시도한 값을 담을 Pre
 *      4. 이전 시도한 모든 값의 결과 데이터를 담을 resultLog
 *      5. 특정 학습한 횟수를 담을 Count
 *      6. 총 학습한 횟수를 담을 totalCount
 *      7. 학습 상태를 담을 state
 *
 * ※우선 순위별 규칙
 * 스트라이크와 볼의 합이 3일 경우
 * 0) 3번의 0S2B일 경우와 같은 규칙을 취하되, 목표는 3S로 설정한다.
 *
 * 스트라이크와 볼의 합이 2일 경우
 * 1) 2S일 경우 모든 경우를 뒤로 하고 TS에 두개의 수를 남은 한 수에 새로운 넘버를 하나 추가해 답을 찾는다.
 *      1-1. 만일 TS에서 찾을 수 없을 경우 부모값으로 돌아간 후 새로운 넘버로 반복한다.
 *      1-2. 이 때 부모값를 찾기 위해 totalCount에 Count를 뺀 값을 를 이용한다.
 *      1-3. 만약 학습도중 1S가 발생한 경우 즉시 TS의 부모값으로 이동한 후 1번을 반복한다.
 *
 * 2) 1S1B일 경우 1번을 제외한 모든 경우를 제외하고 하나의 수는 제자리에 남은 두 개의 수는 자리를 바꿔 2S를 맞춘다.
 *
 * 3) 0S2B일 경우 1번을 제외한 모든 경우를 제외하고 자리를 바꾸며 2S를 맞춘다.
 *      3-1. 만일 3번의 카운트 동안 찾지 못하면 카운트를 초기화 하고 자리를 바꾸는 방식을 바꾸어 새로운 변수에 대처한다.
 *
 * 스트라이크와 볼의 합이 1일 경우
 * 4) 1S일 경우 TS에 하나의 수를 고정시키고 남은 두 수에 새로운 넘버 두개를 추가해 스트라이크와 볼의 합을 2개 이상으로 맞추는 것을 목표로 한다.
 *      4-1. 스트라이크와 볼의 합이 2이상일 때, 스트라이크와 볼의 수에 따라서 state를 변경한다.
 *      4-2. 만일 TS에서 찾을 수 없을 경우 부모값으로 돌아간 후 새로운 넘버로 반복한다.
 *      4-3. 이 때 부모값을 찾기 위해 Count와 TC를 이용한다.
 *      4-4. 학습 도중 OUT이 발생한 경우 즉시 TS의 부모값으로 이동한 후 4번을 반복한다.
 * 5) 1B일 경우 자리를 바꾸어 가며 1S를 맞춘다.
 *
 * 스트라이크와 볼의 합이 0일 경우
 * 6) OUT일 경우 TB의 모든 수에 새로운 넘버를 추가한다.
 */
public interface Brainface {
    ArrayList[] getLearningData(int[] comnum, int[] result, ArrayList[] info, ArrayList number);
}
